# Ian's Makefile -- point to the llvm-config of the version you want
# to build against (using the LLVM_CONFIG environment variable) and
# type make.
#
# Simple!
#
# but set the default if there is no environment version there...
ifeq ($(LLVM_CONFIG),)
	LLVM_CONFIG=llvm-config
endif

INSTALL = install
CMAKE = cmake

LLVM_CFG = $(LLVM_HOME)/bin/$(LLVM_CONFIG)
LLVM_INCLUDE = $(shell ${LLVM_CFG} --includedir)
LLVM_BUILD_MODE = $(shell ${LLVM_CFG} --build-mode)

CXX_FLAGS += $(shell  ${LLVM_CFG} --cxxflags) -I${LLVM_INCLUDE}
# system header files
CXX_FLAGS += -I/usr/local/include
# OCCAM header files
CXX_FLAGS += -I$(OCCAM_HOME)/include 
# llvm-seahorn header files
CXX_FLAGS += -I$(OCCAM_HOME)/src/tools/llvm-seahorn/include
# sea-dsa header files
CXX_FLAGS += -I$(OCCAM_HOME)/src/analysis/sea-dsa/include
## clam/crab header files
CXX_FLAGS += -I$(OCCAM_HOME)/src/analysis/clam/install/include
CXX_FLAGS += -I$(OCCAM_HOME)/src/analysis/clam/install/crab/include

############################################
## Choose one of these three build types:
############################################
CXX_RELEASE_FLAGS += -O3 -DNDEBUG
CXX_RELWITHDEBINFO_FLAGS += -O2 -g -DNDEBUG
CXX_DEBUG_FLAGS += -g
#------------------------------------------#

CXX_FLAGS += ${CXX_RELEASE_FLAGS}
#CXX_FLAGS += ${CXX_DEBUG_FLAGS}
#CXX_FLAGS += ${CXX_RELWITHDEBINFO_FLAGS}

OS   =  $(shell uname)

## LLVM libraries
## Not needed by shared libraries but needed for executables that use
## LLVM libraries.
LLVM_LIB_DIR = $(shell ${LLVM_CFG} --libdir)
LLVM_LIBS = $(shell ${LLVM_CFG} --libs all-targets aggressiveinstcombine analysis bitwriter \
	  codegen core coroutines ipo irreader instcombine instrumentation mc objcarcopts \
	  remarks scalaropts support target transformutils vectorize passes)

